import {ethers} from 'ethers';
import {Foundry} from '@adraffy/blocksmith';
import {readStorageSpan} from './utils.js';

let foundry = await Foundry.launch();

let contract = await foundry.deploy({sol: `
	contract C {
		struct R {
			uint8 x;
			uint248 y;
		}
		struct S {
			uint256 a;
			bytes16 b;
			uint128 c;
			uint128 d;
			bytes17 e;
			bytes15 f;
			R g;
		}
		S value = S(1, ${ethers.toBeHex(2, 16)}, 3, 4, ${ethers.toBeHex(5, 17)}, ${ethers.toBeHex(6, 15)}, R(7, 8));
		S[] array;
		constructor() {
			array.push(value);
		}
		function encodeValue() external view returns (bytes memory) {
			return abi.encode(value);
		}
		function encodeArray() external view returns (bytes memory) {
			return abi.encode(array);
		}
	}
`});

function dump(hex) {
	console.log(hex);
	for (let i = 2; i < hex.length; ) {
		console.log(`// [${(i - 2) >> 6}] ${hex.slice(i, i += 64)}`);
	}
}

dump(await contract.encodeValue());
// [0] 0000000000000000000000000000000000000000000000000000000000000001
// [1] 0000000000000000000000000000000200000000000000000000000000000000
// [2] 0000000000000000000000000000000000000000000000000000000000000003
// [3] 0000000000000000000000000000000000000000000000000000000000000004
// [4] 0000000000000000000000000000000005000000000000000000000000000000
// [5] 0000000000000000000000000000060000000000000000000000000000000000
// [6] 0000000000000000000000000000000000000000000000000000000000000007
// [7] 0000000000000000000000000000000000000000000000000000000000000008

dump(await readStorageSpan(foundry.provider, contract.target, 0n, 5));
// [0] 0000000000000000000000000000000000000000000000000000000000000001 [a]
// [1] 0000000000000000000000000000000300000000000000000000000000000002 [c, b]
// [2] 0000000000000000000000000000000000000000000000000000000000000004 [d]
// [3] 0000000000000000000000000000060000000000000000000000000000000005 [f, e]
// [4] 0000000000000000000000000000000000000000000000000000000000000807 [y, x]

dump(await contract.encodeArray());
// [0] 0000000000000000000000000000000000000000000000000000000000000020
// [1] 0000000000000000000000000000000000000000000000000000000000000001
// [2] 0000000000000000000000000000000000000000000000000000000000000001
// [3] 0000000000000000000000000000000200000000000000000000000000000000
// [4] 0000000000000000000000000000000000000000000000000000000000000003
// [5] 0000000000000000000000000000000000000000000000000000000000000004
// [6] 0000000000000000000000000000000005000000000000000000000000000000
// [7] 0000000000000000000000000000060000000000000000000000000000000000
// [8] 0000000000000000000000000000000000000000000000000000000000000007
// [9] 0000000000000000000000000000000000000000000000000000000000000008

foundry.shutdown();
